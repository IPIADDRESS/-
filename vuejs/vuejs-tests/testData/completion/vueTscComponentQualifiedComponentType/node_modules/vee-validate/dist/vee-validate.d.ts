import * as vue from 'vue';
import { MaybeRef, Ref, MaybeRefOrGetter, ComputedRef, VNode, PropType, UnwrapRef, InjectionKey } from 'vue';

declare const Field: {
  new (...args: any[]): {
    $: vue.ComponentInternalInstance;
    $data: {};
    $props: {
      label?: string;
      as?: string | Record<string, any>;
      bails?: boolean;
      uncheckedValue?: any;
      modelValue?: any;
      validateOnInput?: boolean;
      validateOnChange?: boolean;
      validateOnBlur?: boolean;
      validateOnModelUpdate?: boolean;
      validateOnMount?: boolean;
      standalone?: boolean;
      modelModifiers?: any;
      rules?: RuleExpression<unknown>;
      'onUpdate:modelValue'?: (e: any) => unknown;
      keepValue?: boolean;
      key?: string | number | symbol;
      readonly name: string;
      style?: unknown;
      class?: unknown;
      ref?: vue.VNodeRef;
      ref_for?: boolean;
      ref_key?: string;
      onVnodeBeforeMount?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
      onVnodeMounted?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
      onVnodeBeforeUpdate?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>, oldVNode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>, oldVNode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
      onVnodeUpdated?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>, oldVNode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>, oldVNode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
      onVnodeBeforeUnmount?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
      onVnodeUnmounted?: ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void) | ((vnode: VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>) => void)[];
    };
    $attrs: {
      [x: string]: unknown;
    };
    $refs: {
      [x: string]: unknown;
    };
    $slots: Readonly<{
      [name: string]: vue.Slot<any>;
    }>;
    $root: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
    $parent: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<{
      as: {
        type: (ObjectConstructor | StringConstructor)[];
        default: any;
      };
      name: {
        type: StringConstructor;
        required: true;
      };
      rules: {
        type: PropType<RuleExpression<unknown>>;
        default: any;
      };
      validateOnMount: {
        type: BooleanConstructor;
        default: boolean;
      };
      validateOnBlur: {
        type: BooleanConstructor;
        default: any;
      };
      validateOnChange: {
        type: BooleanConstructor;
        default: any;
      };
      validateOnInput: {
        type: BooleanConstructor;
        default: any;
      };
      validateOnModelUpdate: {
        type: BooleanConstructor;
        default: any;
      };
      bails: {
        type: BooleanConstructor;
        default: () => boolean;
      };
      label: {
        type: StringConstructor;
        default: any;
      };
      uncheckedValue: {
        type: any;
        default: any;
      };
      modelValue: {
        type: any;
        default: symbol;
      };
      modelModifiers: {
        type: any;
        default: () => {};
      };
      'onUpdate:modelValue': {
        type: PropType<(e: any) => unknown>;
        default: any;
      };
      standalone: {
        type: BooleanConstructor;
        default: boolean;
      };
      keepValue: {
        type: BooleanConstructor;
        default: any;
      };
    }>>, () => VNode<vue.RendererNode, vue.RendererElement, {
      [key: string]: any;
    }> | vue.Slot<any> | VNode<vue.RendererNode, vue.RendererElement, {
      [key: string]: any;
    }>[] | {
      default: () => VNode<vue.RendererNode, vue.RendererElement, {
        [key: string]: any;
      }>[];
    }, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, {
      label: string;
      as: string | Record<string, any>;
      bails: boolean;
      uncheckedValue: any;
      modelValue: any;
      validateOnInput: boolean;
      validateOnChange: boolean;
      validateOnBlur: boolean;
      validateOnModelUpdate: boolean;
      validateOnMount: boolean;
      standalone: boolean;
      modelModifiers: any;
      rules: RuleExpression<unknown>;
      'onUpdate:modelValue': (e: any) => unknown;
      keepValue: boolean;
    }, {}, string, {}> & {
      beforeCreate?: (() => void) | (() => void)[];
      created?: (() => void) | (() => void)[];
      beforeMount?: (() => void) | (() => void)[];
      mounted?: (() => void) | (() => void)[];
      beforeUpdate?: (() => void) | (() => void)[];
      updated?: (() => void) | (() => void)[];
      activated?: (() => void) | (() => void)[];
      deactivated?: (() => void) | (() => void)[];
      beforeDestroy?: (() => void) | (() => void)[];
      beforeUnmount?: (() => void) | (() => void)[];
      destroyed?: (() => void) | (() => void)[];
      unmounted?: (() => void) | (() => void)[];
      renderTracked?: ((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[];
      renderTriggered?: ((e: vue.DebuggerEvent) => void) | ((e: vue.DebuggerEvent) => void)[];
      errorCaptured?: ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void) | ((err: unknown, instance: vue.ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, vue.ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void)[];
    };
    $forceUpdate: () => void;
    $nextTick: typeof vue.nextTick;
    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: vue.WatchOptions<boolean>): vue.WatchStopHandle;
  } & Readonly<vue.ExtractPropTypes<{
    as: {
      type: (ObjectConstructor | StringConstructor)[];
      default: any;
    };
    name: {
      type: StringConstructor;
      required: true;
    };
    rules: {
      type: PropType<RuleExpression<unknown>>;
      default: any;
    };
    validateOnMount: {
      type: BooleanConstructor;
      default: boolean;
    };
    validateOnBlur: {
      type: BooleanConstructor;
      default: any;
    };
    validateOnChange: {
      type: BooleanConstructor;
      default: any;
    };
    validateOnInput: {
      type: BooleanConstructor;
      default: any;
    };
    validateOnModelUpdate: {
      type: BooleanConstructor;
      default: any;
    };
    bails: {
      type: BooleanConstructor;
      default: () => boolean;
    };
    label: {
      type: StringConstructor;
      default: any;
    };
    uncheckedValue: {
      type: any;
      default: any;
    };
    modelValue: {
      type: any;
      default: symbol;
    };
    modelModifiers: {
      type: any;
      default: () => {};
    };
    'onUpdate:modelValue': {
      type: PropType<(e: any) => unknown>;
      default: any;
    };
    standalone: {
      type: BooleanConstructor;
      default: boolean;
    };
    keepValue: {
      type: BooleanConstructor;
      default: any;
    };
  }>> & vue.ShallowUnwrapRef<() => VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
  }> | vue.Slot<any> | VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
  }>[] | {
    default: () => VNode<vue.RendererNode, vue.RendererElement, {
      [key: string]: any;
    }>[];
  }> & {} & vue.ComponentCustomProperties & {};
  __isFragment?: never;
  __isTeleport?: never;
  __isSuspense?: never;
} & vue.ComponentOptionsBase<Readonly<vue.ExtractPropTypes<{
  as: {
    type: (ObjectConstructor | StringConstructor)[];
    default: any;
  };
  name: {
    type: StringConstructor;
    required: true;
  };
  rules: {
    type: PropType<RuleExpression<unknown>>;
    default: any;
  };
  validateOnMount: {
    type: BooleanConstructor;
    default: boolean;
  };
  validateOnBlur: {
    type: BooleanConstructor;
    default: any;
  };
  validateOnChange: {
    type: BooleanConstructor;
    default: any;
  };
  validateOnInput: {
    type: BooleanConstructor;
    default: any;
  };
  validateOnModelUpdate: {
    type: BooleanConstructor;
    default: any;
  };
  bails: {
    type: BooleanConstructor;
    default: () => boolean;
  };
  label: {
    type: StringConstructor;
    default: any;
  };
  uncheckedValue: {
    type: any;
    default: any;
  };
  modelValue: {
    type: any;
    default: symbol;
  };
  modelModifiers: {
    type: any;
    default: () => {};
  };
  'onUpdate:modelValue': {
    type: PropType<(e: any) => unknown>;
    default: any;
  };
  standalone: {
    type: BooleanConstructor;
    default: boolean;
  };
  keepValue: {
    type: BooleanConstructor;
    default: any;
  };
}>>, () => VNode<vue.RendererNode, vue.RendererElement, {
  [key: string]: any;
}> | vue.Slot<any> | VNode<vue.RendererNode, vue.RendererElement, {
  [key: string]: any;
}>[] | {
  default: () => VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
  }>[];
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, {
  label: string;
  as: string | Record<string, any>;
  bails: boolean;
  uncheckedValue: any;
  modelValue: any;
  validateOnInput: boolean;
  validateOnChange: boolean;
  validateOnBlur: boolean;
  validateOnModelUpdate: boolean;
  validateOnMount: boolean;
  standalone: boolean;
  modelModifiers: any;
  rules: RuleExpression<unknown>;
  'onUpdate:modelValue': (e: any) => unknown;
  keepValue: boolean;
}, {}, string, {}> & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps & (new () => {
  setErrors: FieldContext['setErrors'];
  setTouched: FieldContext['setTouched'];
  reset: FieldContext['resetField'];
  validate: FieldContext['validate'];
  handleChange: FieldContext['handleChange'];
  $slots: {
    default: (arg: FieldSlotProps<any>) => VNode[];
  };
});

export { Field };