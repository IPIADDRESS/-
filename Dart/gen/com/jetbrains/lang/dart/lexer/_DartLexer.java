// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Dart.flex

package com.jetbrains.lang.dart.lexer;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.jetbrains.lang.dart.DartTokenTypes.*;
import static com.jetbrains.lang.dart.DartTokenTypesSets.*;
import static com.jetbrains.lang.dart.lexer.DartLexer.*;

@SuppressWarnings("DuplicateBranchesInSwitch")

class _DartLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT_STATE = 2;
  public static final int QUO_STRING = 4;
  public static final int THREE_QUO_STRING = 6;
  public static final int APOS_STRING = 8;
  public static final int THREE_APOS_STRING = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\4\33"+
    "\1\34\1\33\21\35\1\36\2\35\1\37\1\40\1\41"+
    "\1\42\1\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\35\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\35\1\74\1\75\1\76"+
    "\1\77\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\24\7"+
    "\1\36\1\37\1\40\1\41\3\42\1\1\1\43\1\44"+
    "\1\45\1\2\1\1\2\2\1\1\1\2\1\1\1\2"+
    "\2\46\1\6\1\47\1\50\1\51\1\0\1\52\1\53"+
    "\1\54\1\55\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\23\1\64\1\52\1\65\1\0\2\23\1\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\7"+
    "\1\75\10\7\1\76\10\7\1\77\1\7\1\100\1\101"+
    "\7\7\1\102\1\103\2\7\2\104\17\7\1\105\1\106"+
    "\1\107\1\110\1\111\1\0\1\112\1\113\1\114\1\0"+
    "\1\1\2\0\1\46\1\115\1\116\1\117\1\120\1\0"+
    "\1\121\1\122\3\23\1\123\1\124\1\125\24\7\1\126"+
    "\1\127\10\7\1\130\3\7\4\104\3\7\1\131\10\7"+
    "\1\132\1\7\1\133\5\7\1\134\1\135\1\46\1\136"+
    "\1\0\1\137\1\122\2\0\5\7\1\140\1\7\1\141"+
    "\7\7\1\142\1\143\5\7\1\144\3\7\1\145\4\7"+
    "\1\146\1\7\1\147\1\104\2\150\4\7\1\151\3\7"+
    "\1\152\1\153\1\7\1\154\1\7\1\155\1\156\1\7"+
    "\1\157\1\7\1\160\2\7\1\161\1\7\1\162\1\163"+
    "\1\164\1\165\1\166\10\7\1\167\1\170\4\7\1\171"+
    "\1\172\2\7\2\0\5\7\1\173\1\7\1\174\1\7"+
    "\1\175\1\176\1\7\1\177\5\7\1\200\6\7\1\201"+
    "\2\7\1\202\1\7\2\0\2\7\1\203\1\204\1\205"+
    "\1\206\2\7\1\207\2\7\1\210\1\7\1\211\2\7"+
    "\1\212\1\213\2\7\1\214\1\7\1\150\1\7\1\215"+
    "\1\216\1\217\1\220\1\7\1\221\1\7\1\222\2\7"+
    "\1\223\1\224\1\225\1\226\1\7\1\227\1\230";

  private static int [] zzUnpackAction() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0200\0\u0200\0\u0440\0\u0480\0\u0200\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0200\0\u0200\0\u0600\0\u0640\0\u0200"+
    "\0\u0680\0\u0200\0\u0200\0\u0200\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0200\0\u0c00\0\u0200\0\u0c40\0\u0200\0\u0c80\0\u0cc0"+
    "\0\u0d00\0\u0200\0\u0200\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40"+
    "\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u0200\0\u0200"+
    "\0\u0200\0\u0200\0\u1000\0\u1040\0\u0200\0\u1080\0\u0200\0\u10c0"+
    "\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u0200\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u0200"+
    "\0\u0200\0\u0200\0\u1340\0\u1380\0\u0200\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u0340"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800"+
    "\0\u0340\0\u1840\0\u1880\0\u0340\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u0340\0\u0340\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u0200\0\u1f40\0\u1f80\0\u0200\0\u0200\0\u0d80\0\u1fc0\0\u0200"+
    "\0\u0200\0\u2000\0\u0200\0\u0ec0\0\u2040\0\u2080\0\u0200\0\u0200"+
    "\0\u0200\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240"+
    "\0\u0200\0\u0200\0\u0200\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u0340"+
    "\0\u0340\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u0340\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u0340\0\u2c00\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u0340\0\u2e00\0\u0340"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u0200\0\u0200\0\u2f80"+
    "\0\u0200\0\u2140\0\u0200\0\u2fc0\0\u2200\0\u2240\0\u3000\0\u3040"+
    "\0\u3080\0\u30c0\0\u3100\0\u0340\0\u3140\0\u0340\0\u3180\0\u31c0"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u0340\0\u0340\0\u3340"+
    "\0\u3380\0\u33c0\0\u3400\0\u3440\0\u0340\0\u3480\0\u34c0\0\u3500"+
    "\0\u0340\0\u3540\0\u3580\0\u35c0\0\u3600\0\u0340\0\u3640\0\u0340"+
    "\0\u0200\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u0340"+
    "\0\u3800\0\u3840\0\u3880\0\u0340\0\u0340\0\u38c0\0\u0340\0\u3900"+
    "\0\u0340\0\u0340\0\u3940\0\u0340\0\u3980\0\u0f80\0\u39c0\0\u3a00"+
    "\0\u0340\0\u3a40\0\u0340\0\u0340\0\u0340\0\u0340\0\u0340\0\u3a80"+
    "\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u0340"+
    "\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u0340\0\u0340\0\u3dc0"+
    "\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0"+
    "\0\u0340\0\u4000\0\u0340\0\u4040\0\u0340\0\u0340\0\u4080\0\u0340"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u0340\0\u4200\0\u4240"+
    "\0\u4280\0\u42c0\0\u4300\0\u4340\0\u0340\0\u4380\0\u43c0\0\u0340"+
    "\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u0340\0\u0340\0\u0340"+
    "\0\u0340\0\u4540\0\u4580\0\u0340\0\u45c0\0\u4600\0\u0340\0\u4640"+
    "\0\u0340\0\u4680\0\u46c0\0\u0340\0\u0340\0\u4700\0\u4740\0\u0340"+
    "\0\u4780\0\u0200\0\u47c0\0\u0340\0\u0340\0\u0340\0\u0340\0\u4800"+
    "\0\u0340\0\u4840\0\u0340\0\u4880\0\u48c0\0\u0340\0\u0340\0\u0340"+
    "\0\u0340\0\u4900\0\u0340\0\u0340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\4\16\1\43\1\11\1\44\1\45\1\16"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\16\1\57\1\60\1\61\1\62\1\63\1\16"+
    "\1\64\1\65\1\66\1\16\1\67\1\70\1\16\1\71"+
    "\1\72\1\73\1\74\1\75\14\76\1\77\4\76\1\100"+
    "\56\76\2\101\1\102\1\101\1\103\1\101\1\104\31\101"+
    "\1\105\37\101\4\106\1\107\1\106\1\104\31\106\1\110"+
    "\37\106\2\111\1\102\3\111\1\104\2\111\1\103\26\111"+
    "\1\112\37\111\6\113\1\104\2\113\1\114\26\113\1\110"+
    "\37\113\33\11\4\115\4\11\23\115\1\116\5\115\5\11"+
    "\2\12\1\13\1\14\1\117\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\4\16\1\43\1\11\1\44\1\45\1\16\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\16\1\57\1\60\1\61\1\62\1\63\1\16\1\64"+
    "\1\65\1\66\1\16\1\67\1\70\1\16\1\71\1\120"+
    "\1\73\1\121\1\75\101\0\2\12\124\0\1\122\54\0"+
    "\1\123\76\0\1\124\102\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\31\16\33\0\1\125\60\0\1\126\16\0"+
    "\1\127\61\0\1\130\115\0\1\131\65\0\1\132\11\0"+
    "\1\133\67\0\1\134\7\0\1\135\70\0\1\136\1\0"+
    "\2\137\70\0\1\140\4\0\1\141\5\0\1\142\70\0"+
    "\1\143\1\0\2\33\10\0\1\144\1\0\1\145\4\0"+
    "\1\146\4\0\1\144\21\0\1\145\25\0\1\143\1\0"+
    "\2\33\10\0\1\144\6\0\1\146\4\0\1\144\55\0"+
    "\1\147\1\150\77\0\1\151\1\152\67\0\1\153\10\0"+
    "\1\154\75\0\1\155\56\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\2\16\1\156\17\16\1\157\1\16\1\160"+
    "\1\16\1\161\2\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\162\17\16\1\163\7\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\1\16\1\164"+
    "\11\16\1\165\2\16\1\166\12\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\167\10\16\1\170"+
    "\12\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\13\16\1\171\1\16\1\172\11\16\1\173\1\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\1\16\1\174"+
    "\7\16\1\175\4\16\1\176\12\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\177\23\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\11\16\1\200"+
    "\17\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\6\16\1\201\5\16\1\202\1\203\4\16\1\204\6\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\1\16"+
    "\1\205\7\16\1\206\17\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\1\16\1\207\7\16\1\210\17\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\1\16"+
    "\1\211\3\16\1\212\16\16\1\213\4\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\6\16\1\214\6\16"+
    "\1\215\1\16\1\216\11\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\1\16\1\217\27\16\10\0\1\220"+
    "\1\0\1\16\2\0\1\221\10\0\2\16\7\0\4\16"+
    "\4\0\5\16\1\222\23\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\5\16\1\223\2\16\1\224\12\16"+
    "\1\225\1\226\1\16\1\227\1\16\1\230\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\10\16\1\231\10\16"+
    "\1\232\6\16\1\233\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\234\14\16\1\235\12\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\10\16\1\236"+
    "\1\237\17\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\11\16\1\240\17\16\33\0\1\241\45\0\1\242"+
    "\23\0\1\243\77\0\1\244\72\0\1\245\63\0\2\101"+
    "\1\0\1\101\1\0\1\101\1\0\31\101\1\246\37\101"+
    "\33\0\4\247\4\0\31\247\1\250\3\0\2\101\1\0"+
    "\75\101\4\106\1\0\1\106\1\0\31\106\1\0\37\106"+
    "\4\251\1\252\73\251\100\253\2\111\1\0\3\111\1\0"+
    "\2\111\1\0\26\111\1\254\41\111\1\0\75\111\6\113"+
    "\1\0\2\113\1\0\26\113\1\0\37\113\11\251\1\255"+
    "\66\251\22\0\2\115\7\0\4\115\4\0\31\115\26\0"+
    "\2\115\7\0\4\115\4\0\10\115\1\256\20\115\10\0"+
    "\1\257\73\0\2\124\1\0\75\124\27\0\1\260\61\0"+
    "\1\261\106\0\1\262\101\0\2\137\10\0\1\144\6\0"+
    "\1\263\4\0\1\144\43\0\1\264\63\0\2\124\1\0"+
    "\16\124\1\265\56\124\22\0\2\137\71\0\1\266\1\0"+
    "\1\266\2\0\2\267\76\0\2\270\7\0\2\270\7\0"+
    "\6\270\50\0\2\33\17\0\1\146\63\0\1\271\70\0"+
    "\1\272\106\0\1\273\56\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\22\16\1\274\6\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\22\16\1\275\5\16\1\276"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\7\16"+
    "\1\277\21\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\1\16\1\300\27\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\22\16\1\301\6\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\5\16\1\302\23\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\22\16"+
    "\1\303\1\304\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\305\27\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\15\16\1\306\7\16\1\307"+
    "\3\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\6\16\1\310\22\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\22\16\1\311\6\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\24\16\1\312\4\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\17\16\1\313"+
    "\3\16\1\314\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\3\16\1\315\7\16\1\316\15\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\15\16\1\317"+
    "\13\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\21\16\1\320\7\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\23\16\1\321\5\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\4\16\1\322\24\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\17\16\1\323"+
    "\11\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\23\16\1\324\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\23\16\1\325\5\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\2\16\1\326\26\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\3\16\1\327"+
    "\25\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\27\16\1\330\1\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\23\16\1\331\5\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\26\16\1\332\2\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\13\16\1\333"+
    "\15\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\5\16\1\334\23\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\21\16\1\335\7\16\4\0\2\336\1\0"+
    "\1\336\1\337\73\336\2\340\1\0\6\340\1\341\66\340"+
    "\6\0\1\16\13\0\2\16\7\0\4\16\4\0\20\16"+
    "\1\342\2\16\1\343\5\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\1\16\1\344\21\16\1\345\5\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\16\16"+
    "\1\346\12\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\1\16\1\347\27\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\17\16\1\350\11\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\11\16\1\351\17\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\15\16"+
    "\1\352\13\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\11\16\1\353\7\16\1\354\7\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\24\16\1\355\3\16"+
    "\1\356\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\17\16\1\357\11\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\21\16\1\360\7\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\11\16\1\361\17\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\362"+
    "\3\16\1\363\17\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\23\16\1\364\5\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\365\23\16\33\0"+
    "\1\366\77\0\1\367\72\0\2\247\7\0\4\247\4\0"+
    "\31\247\4\0\4\251\1\103\104\251\1\103\66\251\22\0"+
    "\2\115\7\0\4\115\4\0\11\115\1\370\17\115\35\0"+
    "\1\371\70\0\2\137\17\0\1\263\50\0\1\372\4\0"+
    "\1\373\56\0\2\374\1\0\16\374\1\124\56\374\22\0"+
    "\2\267\76\0\2\267\17\0\1\375\56\0\2\270\7\0"+
    "\2\270\6\0\1\376\6\270\34\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\23\16\1\377\5\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\5\16\1\u0100\23\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\15\16"+
    "\1\u0101\13\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\14\16\1\u0102\14\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\11\16\1\u0103\17\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\5\16\1\u0104\23\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\1\16"+
    "\1\u0105\27\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\5\16\1\u0106\23\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\3\16\1\u0107\25\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\22\16\1\u0108\6\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\22\16"+
    "\1\u0109\1\u010a\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\u010b\27\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\1\16\1\u010c\3\16\1\u010d"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\5\16\1\u010e\23\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\14\16\1\u010f\14\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\16\16\1\u0110\12\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u0111"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\23\16\1\u0112\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\22\16\1\u0113\6\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\1\16\1\u0114\27\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u0115"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\13\16\1\u0116\2\16\1\u0117\12\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\u0118\23\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u0119"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\21\16\1\u011a\7\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\21\16\1\u011b\7\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\11\16\1\u011c\17\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\11\16\1\u011d"+
    "\17\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\13\16\1\u011e\15\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\21\16\1\u011f\7\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\23\16\1\u0120\5\16\4\0"+
    "\2\336\1\0\1\336\1\u0121\73\336\4\0\1\u0122\73\0"+
    "\2\340\1\0\6\340\1\u0121\66\340\11\0\1\u0123\74\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\24\16\1\u0124"+
    "\4\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\10\16\1\u0125\13\16\1\u0126\4\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\13\16\1\u0127\15\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\26\16\1\u0128"+
    "\2\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\23\16\1\u0129\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\5\16\1\u012a\23\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\23\16\1\u012b\5\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\3\16\1\u012c"+
    "\25\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\22\16\1\u012d\6\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\16\16\1\u012e\12\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\u012f\23\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u0130"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\4\16\1\u0131\24\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\15\16\1\u0132\13\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\13\16\1\u0133\15\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\10\16\1\u0134"+
    "\20\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\13\16\1\u0135\15\16\26\0\2\115\7\0\4\115\4\0"+
    "\22\115\1\u0136\6\115\4\0\2\374\1\0\75\374\6\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\21\16\1\u0137"+
    "\7\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\21\16\1\u0138\7\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\3\16\1\u0139\25\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\u013a\23\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\23\16\1\u013b"+
    "\5\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\12\16\1\u013c\16\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\10\16\1\u013d\20\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\22\16\1\u013e\6\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\23\16\1\u013f"+
    "\5\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\11\16\1\u0140\17\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\21\16\1\u0141\7\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\24\16\1\u0142\4\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\21\16\1\u0143"+
    "\7\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\21\16\1\u0144\7\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\15\16\1\u0145\3\16\1\u0146\7\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\16\16\1\u0147"+
    "\12\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\5\16\1\u0148\23\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\13\16\1\u0149\15\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\5\16\1\u014a\23\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\21\16\1\u014b"+
    "\7\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\21\16\1\u014c\7\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\u014d\27\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\16\16\1\u014e\12\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\15\16\1\u014f"+
    "\13\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\25\16\1\u0150\3\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\u0151\27\16\4\0\4\u0122\1\u0152"+
    "\73\u0122\11\u0123\1\u0153\66\u0123\6\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\11\16\1\u0154\17\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\21\16\1\u0155\7\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\21\16"+
    "\1\u0156\7\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\5\16\1\u0157\23\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\11\16\1\u0158\17\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\21\16\1\u0159\7\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\3\16"+
    "\1\u015a\25\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\26\16\1\u015b\2\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\4\16\1\u015c\24\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\5\16\1\u015d\23\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\4\16"+
    "\1\u015e\24\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\1\16\1\u015f\27\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\23\16\1\u0160\5\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\15\16\1\u0161\13\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\15\16"+
    "\1\u0162\13\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\11\16\1\u0163\17\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\13\16\1\u0164\15\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\21\16\1\u0165\7\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\23\16"+
    "\1\u0166\5\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\4\16\1\u0167\15\16\1\u0168\6\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\15\16\1\u0169\13\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\21\16"+
    "\1\u016a\7\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\13\16\1\u016b\15\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\14\16\1\u016c\14\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\23\16\1\u016d\5\16"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\6\16"+
    "\1\u016e\22\16\12\0\1\16\13\0\2\16\7\0\4\16"+
    "\4\0\21\16\1\u016f\7\16\12\0\1\16\13\0\2\16"+
    "\7\0\4\16\4\0\5\16\1\u0170\23\16\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\23\16\1\u0171\5\16"+
    "\4\0\4\u0122\1\u0172\73\u0122\11\u0123\1\u0173\66\u0123\6\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\21\16\1\u0174"+
    "\7\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\16\16\1\u0175\12\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\15\16\1\u0176\13\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\4\16\1\u0177\24\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\3\16\1\u0178"+
    "\25\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\10\16\1\u0179\20\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\5\16\1\u017a\23\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\3\16\1\u017b\25\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\23\16\1\u017c"+
    "\5\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\24\16\1\u017d\4\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\u017e\27\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\23\16\1\u017f\5\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u0180"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\22\16\1\u0181\6\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\11\16\1\u0182\17\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\1\16\1\u0183\27\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\30\16\1\u0184"+
    "\12\0\1\16\13\0\2\16\7\0\4\16\4\0\30\16"+
    "\1\u0185\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\5\16\1\u0186\23\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\1\16\1\u0187\27\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\30\16\1\u0188\12\0\1\16"+
    "\13\0\2\16\7\0\4\16\4\0\16\16\1\u0189\12\16"+
    "\4\0\4\u0122\1\u018a\73\u0122\11\u0123\1\u018a\66\u0123\6\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u018b"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\26\16\1\u018c\2\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\6\16\1\u018d\22\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\23\16\1\u018e\5\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u018f"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\15\16\1\u0190\13\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\4\16\1\u0191\24\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\16\16\1\u0192\12\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\13\16\1\u0193"+
    "\15\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\15\16\1\u0194\13\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\3\16\1\u0195\25\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\21\16\1\u0196\7\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\4\16\1\u0197"+
    "\24\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\23\16\1\u0198\5\16\12\0\1\16\13\0\2\16\7\0"+
    "\4\16\4\0\15\16\1\u0199\13\16\12\0\1\16\13\0"+
    "\2\16\7\0\4\16\4\0\23\16\1\u019a\5\16\12\0"+
    "\1\16\13\0\2\16\7\0\4\16\4\0\5\16\1\u019b"+
    "\23\16\12\0\1\16\13\0\2\16\7\0\4\16\4\0"+
    "\22\16\1\u019c\6\16\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18752];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\0\1\11\10\1\2\11\2\1\1\11"+
    "\5\1\2\11\2\1\1\11\1\1\3\11\25\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\2\11\13\1\4\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\0\5\11\4\1"+
    "\1\11\1\0\2\1\1\0\1\1\3\11\2\1\1\11"+
    "\63\1\1\11\2\1\2\11\1\0\1\1\2\11\1\0"+
    "\1\11\2\0\1\1\3\11\1\1\1\0\5\1\3\11"+
    "\72\1\2\11\1\1\1\11\1\0\1\11\1\1\2\0"+
    "\42\1\1\11\60\1\2\0\36\1\2\0\26\1\1\11"+
    "\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[412];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
      this.state = state;
      this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
      return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();
  protected int myLeftBraceCount;

  private void pushState(int state) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  _DartLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _DartLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  myLeftBraceCount = 0;
  myStateStack.clear();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return REGULAR_STRING_PART;
            }
          // fall through
          case 153: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 154: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 155: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 156: break;
          case 5:
            { pushState(QUO_STRING);        return OPEN_QUOTE;
            }
          // fall through
          case 157: break;
          case 6:
            { return HASH;
            }
          // fall through
          case 158: break;
          case 7:
            { return IDENTIFIER;
            }
          // fall through
          case 159: break;
          case 8:
            { return REM;
            }
          // fall through
          case 160: break;
          case 9:
            { return AND;
            }
          // fall through
          case 161: break;
          case 10:
            { pushState(APOS_STRING);       return OPEN_QUOTE;
            }
          // fall through
          case 162: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 163: break;
          case 12:
            { return RPAREN;
            }
          // fall through
          case 164: break;
          case 13:
            { return MUL;
            }
          // fall through
          case 165: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 166: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 167: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 168: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 169: break;
          case 18:
            { return DIV;
            }
          // fall through
          case 170: break;
          case 19:
            { return NUMBER;
            }
          // fall through
          case 171: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 172: break;
          case 21:
            { return SEMICOLON;
            }
          // fall through
          case 173: break;
          case 22:
            { return LT;
            }
          // fall through
          case 174: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 175: break;
          case 24:
            { return GT;
            }
          // fall through
          case 176: break;
          case 25:
            { return QUEST;
            }
          // fall through
          case 177: break;
          case 26:
            { return AT;
            }
          // fall through
          case 178: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 179: break;
          case 28:
            { return RBRACKET;
            }
          // fall through
          case 180: break;
          case 29:
            { return XOR;
            }
          // fall through
          case 181: break;
          case 30:
            { return LBRACE;
            }
          // fall through
          case 182: break;
          case 31:
            { return OR;
            }
          // fall through
          case 183: break;
          case 32:
            { return RBRACE;
            }
          // fall through
          case 184: break;
          case 33:
            { return BIN_NOT;
            }
          // fall through
          case 185: break;
          case 34:
            { return MULTI_LINE_COMMENT_BODY;
            }
          // fall through
          case 186: break;
          case 35:
            { popState();                   return WHITE_SPACE;
            }
          // fall through
          case 187: break;
          case 36:
            { popState();                   return CLOSING_QUOTE;
            }
          // fall through
          case 188: break;
          case 37:
            { return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 189: break;
          case 38:
            { popState(); return IDENTIFIER;
            }
          // fall through
          case 190: break;
          case 39:
            { myLeftBraceCount++; return LBRACE;
            }
          // fall through
          case 191: break;
          case 40:
            { if (myLeftBraceCount == 0) {
                                     popState();
                                     return LONG_TEMPLATE_ENTRY_END;
                                   }
                                   myLeftBraceCount--;
                                   return RBRACE;
            }
          // fall through
          case 192: break;
          case 41:
            { return NEQ;
            }
          // fall through
          case 193: break;
          case 42:
            { return SINGLE_LINE_COMMENT;
            }
          // fall through
          case 194: break;
          case 43:
            { return REM_EQ;
            }
          // fall through
          case 195: break;
          case 44:
            { return AND_AND;
            }
          // fall through
          case 196: break;
          case 45:
            { return AND_EQ;
            }
          // fall through
          case 197: break;
          case 46:
            { return MUL_EQ;
            }
          // fall through
          case 198: break;
          case 47:
            { return PLUS_PLUS;
            }
          // fall through
          case 199: break;
          case 48:
            { return PLUS_EQ;
            }
          // fall through
          case 200: break;
          case 49:
            { return MINUS_MINUS;
            }
          // fall through
          case 201: break;
          case 50:
            { return MINUS_EQ;
            }
          // fall through
          case 202: break;
          case 51:
            { return DOT_DOT;
            }
          // fall through
          case 203: break;
          case 52:
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
            }
          // fall through
          case 204: break;
          case 53:
            { return DIV_EQ;
            }
          // fall through
          case 205: break;
          case 54:
            { return LT_LT;
            }
          // fall through
          case 206: break;
          case 55:
            { return LT_EQ;
            }
          // fall through
          case 207: break;
          case 56:
            { return EQ_EQ;
            }
          // fall through
          case 208: break;
          case 57:
            { return EXPRESSION_BODY_DEF;
            }
          // fall through
          case 209: break;
          case 58:
            { return QUEST_DOT;
            }
          // fall through
          case 210: break;
          case 59:
            { return QUEST_QUEST;
            }
          // fall through
          case 211: break;
          case 60:
            { return XOR_EQ;
            }
          // fall through
          case 212: break;
          case 61:
            { return AS;
            }
          // fall through
          case 213: break;
          case 62:
            { return DO;
            }
          // fall through
          case 214: break;
          case 63:
            { return IF;
            }
          // fall through
          case 215: break;
          case 64:
            { return IN;
            }
          // fall through
          case 216: break;
          case 65:
            { return IS;
            }
          // fall through
          case 217: break;
          case 66:
            { return OF;
            }
          // fall through
          case 218: break;
          case 67:
            { return ON;
            }
          // fall through
          case 219: break;
          case 68:
            { return RAW_SINGLE_QUOTED_STRING;
            }
          // fall through
          case 220: break;
          case 69:
            { return OR_EQ;
            }
          // fall through
          case 221: break;
          case 70:
            { return OR_OR;
            }
          // fall through
          case 222: break;
          case 71:
            { return INT_DIV;
            }
          // fall through
          case 223: break;
          case 72:
            { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE
                                                                                                               ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                                                               : MULTI_LINE_COMMENT_END;
            }
          // fall through
          case 224: break;
          case 73:
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
            }
          // fall through
          case 225: break;
          case 74:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                                                             yypushback(yylength() - 1);
                                                                                             return SHORT_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 226: break;
          case 75:
            { pushState(LONG_TEMPLATE_ENTRY);
                                                                                             return LONG_TEMPLATE_ENTRY_START;
            }
          // fall through
          case 227: break;
          case 76:
            { yypushback(1); return REGULAR_STRING_PART;
            }
          // fall through
          case 228: break;
          case 77:
            { pushState(THREE_QUO_STRING);  return OPEN_QUOTE;
            }
          // fall through
          case 229: break;
          case 78:
            { return AND_AND_EQ;
            }
          // fall through
          case 230: break;
          case 79:
            { pushState(THREE_APOS_STRING); return OPEN_QUOTE;
            }
          // fall through
          case 231: break;
          case 80:
            { return DOT_DOT_DOT;
            }
          // fall through
          case 232: break;
          case 81:
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_DOC_COMMENT_START;
            }
          // fall through
          case 233: break;
          case 82:
            { return SINGLE_LINE_DOC_COMMENT;
            }
          // fall through
          case 234: break;
          case 83:
            { return LT_LT_EQ;
            }
          // fall through
          case 235: break;
          case 84:
            { return QUEST_DOT_DOT;
            }
          // fall through
          case 236: break;
          case 85:
            { return QUEST_QUEST_EQ;
            }
          // fall through
          case 237: break;
          case 86:
            { return FOR;
            }
          // fall through
          case 238: break;
          case 87:
            { return GET;
            }
          // fall through
          case 239: break;
          case 88:
            { return NEW;
            }
          // fall through
          case 240: break;
          case 89:
            { return SET;
            }
          // fall through
          case 241: break;
          case 90:
            { return TRY;
            }
          // fall through
          case 242: break;
          case 91:
            { return VAR;
            }
          // fall through
          case 243: break;
          case 92:
            { return OR_OR_EQ;
            }
          // fall through
          case 244: break;
          case 93:
            { return INT_DIV_EQ;
            }
          // fall through
          case 245: break;
          case 94:
            { return DOT_DOT_DOT_QUEST;
            }
          // fall through
          case 246: break;
          case 95:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 247: break;
          case 96:
            { return BASE;
            }
          // fall through
          case 248: break;
          case 97:
            { return CASE;
            }
          // fall through
          case 249: break;
          case 98:
            { return ELSE;
            }
          // fall through
          case 250: break;
          case 99:
            { return ENUM;
            }
          // fall through
          case 251: break;
          case 100:
            { return HIDE;
            }
          // fall through
          case 252: break;
          case 101:
            { return LATE;
            }
          // fall through
          case 253: break;
          case 102:
            { return NULL;
            }
          // fall through
          case 254: break;
          case 103:
            { return PART;
            }
          // fall through
          case 255: break;
          case 104:
            { return RAW_TRIPLE_QUOTED_STRING;
            }
          // fall through
          case 256: break;
          case 105:
            { return SHOW;
            }
          // fall through
          case 257: break;
          case 106:
            { return SYNC;
            }
          // fall through
          case 258: break;
          case 107:
            { return THIS;
            }
          // fall through
          case 259: break;
          case 108:
            { return TRUE;
            }
          // fall through
          case 260: break;
          case 109:
            { return VOID;
            }
          // fall through
          case 261: break;
          case 110:
            { return WHEN;
            }
          // fall through
          case 262: break;
          case 111:
            { return WITH;
            }
          // fall through
          case 263: break;
          case 112:
            { popState(); return THIS;
            }
          // fall through
          case 264: break;
          case 113:
            { return ASYNC;
            }
          // fall through
          case 265: break;
          case 114:
            { return AWAIT;
            }
          // fall through
          case 266: break;
          case 115:
            { return BREAK;
            }
          // fall through
          case 267: break;
          case 116:
            { return CATCH;
            }
          // fall through
          case 268: break;
          case 117:
            { return CLASS;
            }
          // fall through
          case 269: break;
          case 118:
            { return CONST;
            }
          // fall through
          case 270: break;
          case 119:
            { return FALSE;
            }
          // fall through
          case 271: break;
          case 120:
            { return FINAL;
            }
          // fall through
          case 272: break;
          case 121:
            { return MACRO;
            }
          // fall through
          case 273: break;
          case 122:
            { return MIXIN;
            }
          // fall through
          case 274: break;
          case 123:
            { return SUPER;
            }
          // fall through
          case 275: break;
          case 124:
            { return THROW;
            }
          // fall through
          case 276: break;
          case 125:
            { return WHILE;
            }
          // fall through
          case 277: break;
          case 126:
            { return YIELD;
            }
          // fall through
          case 278: break;
          case 127:
            { return ASSERT;
            }
          // fall through
          case 279: break;
          case 128:
            { return EXPORT;
            }
          // fall through
          case 280: break;
          case 129:
            { return IMPORT;
            }
          // fall through
          case 281: break;
          case 130:
            { return NATIVE;
            }
          // fall through
          case 282: break;
          case 131:
            { return RETURN;
            }
          // fall through
          case 283: break;
          case 132:
            { return SEALED;
            }
          // fall through
          case 284: break;
          case 133:
            { return STATIC;
            }
          // fall through
          case 285: break;
          case 134:
            { return SWITCH;
            }
          // fall through
          case 286: break;
          case 135:
            { return AUGMENT;
            }
          // fall through
          case 287: break;
          case 136:
            { return DEFAULT;
            }
          // fall through
          case 288: break;
          case 137:
            { return EXTENDS;
            }
          // fall through
          case 289: break;
          case 138:
            { return FACTORY;
            }
          // fall through
          case 290: break;
          case 139:
            { return FINALLY;
            }
          // fall through
          case 291: break;
          case 140:
            { return LIBRARY;
            }
          // fall through
          case 292: break;
          case 141:
            { return RETHROW;
            }
          // fall through
          case 293: break;
          case 142:
            { return TYPEDEF;
            }
          // fall through
          case 294: break;
          case 143:
            { return ABSTRACT;
            }
          // fall through
          case 295: break;
          case 144:
            { return CONTINUE;
            }
          // fall through
          case 296: break;
          case 145:
            { return DEFERRED;
            }
          // fall through
          case 297: break;
          case 146:
            { return EXTERNAL;
            }
          // fall through
          case 298: break;
          case 147:
            { return OPERATOR;
            }
          // fall through
          case 299: break;
          case 148:
            { return REQUIRED;
            }
          // fall through
          case 300: break;
          case 149:
            { return COVARIANT;
            }
          // fall through
          case 301: break;
          case 150:
            { return EXTENSION;
            }
          // fall through
          case 302: break;
          case 151:
            { return INTERFACE;
            }
          // fall through
          case 303: break;
          case 152:
            { return IMPLEMENTS;
            }
          // fall through
          case 304: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
